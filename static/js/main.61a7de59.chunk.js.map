{"version":3,"sources":["NavBar.js","LibFascCard.js","CardGrid.js","Game.js","utils.js","LibFasc.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","marginRight","NavBar","classes","className","AppBar","position","Toolbar","Typography","variant","Button","color","card","maxWidth","img","height","LibFascCard","props","imgPath","process","cardType","Card","CardMedia","src","alt","CardGrid","cards","slice","index","Grid","container","spacing","map","item","key","guess","backgroundColor","paddingTop","paddingBottom","guessButton","margin","cardGrid","Guess","Container","onClick","this","value","ResultGrid","Game","guessCard","choice","state","endGame","Fragment","React","Component","type","number","generateCards","n","libCards","i","push","footer","palette","background","paper","padding","fascCards","allCards","array","t","m","length","Math","floor","random","shuffle","concat","Footer","align","Link","href","Date","getFullYear","LibFasc","CssBaseline","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,YAAa,YAIF,SAASC,IACtB,IAAMC,EAAUR,IAEhB,OACE,yBAAKS,UAAWD,EAAQL,MACtB,kBAACO,EAAA,EAAD,CAAQC,SAAS,YACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQH,OAA5C,WAGA,kBAACU,EAAA,EAAD,CAAQC,MAAM,WAAd,QACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAd,Y,4ECtBJhB,EAAYC,YAAW,CAC3BgB,KAAM,CACJC,SAAU,KAEZC,IAAK,CACHD,SAAU,IACVE,OAAQ,UAIG,SAASC,EAAYC,GAClC,IAAMd,EAAUR,IACVuB,EAAUC,yBAA4CF,EAAMG,SAAW,OAE7E,OACE,kBAACC,EAAA,EAAD,CAAMjB,UAAWD,EAAQS,MACvB,kBAACU,EAAA,EAAD,CAAWtB,MAAOiB,EAAMG,SAAW,QACjC,yBAAKhB,UAAWD,EAAQW,IAAKS,IAAKL,EAASM,IAAKP,EAAMG,SAAW,WCjB1D,SAASK,EAASR,GAC/B,IAAMS,EAAQT,EAAMS,MAAMC,MAAM,EAAGV,EAAMW,OAEzC,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBL,EAAMM,KAAI,SAAApB,GAAI,OACb,kBAACiB,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAKtB,EAAKsB,KACnB,kBAAClB,EAAD,CACEI,SAAUR,EAAKQ,gBCN3B,IAAMzB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCsC,MAAO,CACLC,gBAAiB,YACjBC,WAAYxC,EAAMkC,QAAQ,GAC1BO,cAAezC,EAAMkC,QAAQ,IAE/BQ,YAAa,CACXC,OAAQ3C,EAAMkC,QAAQ,IAExBU,SAAU,CACRL,gBAAiB,WACjBC,WAAYxC,EAAMkC,QAAQ,GAC1BO,cAAezC,EAAMkC,QAAQ,QAIjC,SAASW,EAAMzB,GACb,IAAMd,EAAUR,IAChB,OACE,kBAACgD,EAAA,EAAD,CAAWvC,UAAWD,EAAQgC,MAAOtB,SAAS,MAC5C,kBAACH,EAAA,EAAD,CACED,QAAQ,WACRL,UAAWD,EAAQoC,YACnB5B,MAAM,UACNiC,QAAS3B,EAAM2B,QAAQC,MACvBC,MAAM,WALR,OAQA,kBAACpC,EAAA,EAAD,CACED,QAAQ,WACRL,UAAWD,EAAQoC,YACnB5B,MAAM,YACNiC,QAAS3B,EAAM2B,QAAQC,MACvBC,MAAM,WALR,SAYN,SAASC,EAAW9B,GAClB,IAAMd,EAAUR,IAChB,OACE,kBAACgD,EAAA,EAAD,CAAWvC,UAAWD,EAAQsC,SAAU5B,SAAS,MAC/C,kBAACY,EAAD,CAAUC,MAAOT,EAAMS,MAAOE,MAAOX,EAAMW,S,IAK5BoB,E,YACnB,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KAMRgC,UAAY,SAACC,GAGPA,IAFW,EAAKjC,MAAMS,MAAM,EAAKyB,MAAMvB,OAAOR,SAGhD,EAAK+B,MAAMvB,QAEX,EAAKwB,WAXP,EAAKD,MAAQ,CACXvB,MAAO,GAHQ,E,yGAsBjB,OACE,kBAAC,IAAMyB,SAAP,KACE,8BACE,kBAACX,EAAD,CAAOE,QAASC,KAAKI,YACrB,kBAACF,EAAD,CAAYrB,MAAOmB,KAAK5B,MAAMS,MAAOE,MAAOiB,KAAKM,MAAMvB,c,GA3B/B0B,IAAMC,WCxDxC,SAAS3C,EAAK4C,EAAMC,GAClBZ,KAAKzB,SAAWoC,EAChBX,KAAKX,IAAL,UAAcsB,EAAd,iBAA2BC,GAGtB,SAASC,EAAcF,EAAMG,GAElC,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAIF,EAAGE,IACrBD,EAASE,KAAK,IAAIlD,EAAK4C,EAAMK,IAG/B,OAAOD,ECAT,IAAMjE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkE,OAAQ,CACN3B,gBAAiBvC,EAAMmE,QAAQC,WAAWC,MAC1CC,QAAStE,EAAMkC,QAAQ,QAMrB6B,EAAWF,EAAc,UAFR,GAGjBU,EAAYV,EAAc,UAFR,IAGlBW,EDRC,SAAiBC,GAItB,IAHA,IAAsBC,EAAGV,EAArBW,EAAIF,EAAMG,OAGPD,GAGLX,EAAIa,KAAKC,MAAMD,KAAKE,SAAWJ,KAG/BD,EAAID,EAAME,GACVF,EAAME,GAAKF,EAAMT,GACjBS,EAAMT,GAAKU,EAGb,OAAOD,ECPQO,CAAQjB,EAASkB,OAAOV,IAEzC,SAASW,IACP,IAAM5E,EAAUR,IAChB,OACE,4BAAQS,UAAWD,EAAQ4D,QACzB,kBAACvD,EAAA,EAAD,CAAYC,QAAQ,QAAQE,MAAM,gBAAgBqE,MAAM,UACrD,kBACD,kBAACC,EAAA,EAAD,CAAMtE,MAAM,UAAUuE,KAAK,+CAA3B,WAEQ,KACP,IAAIC,MAAOC,cACX,MAMM,SAASC,IACtB,OACE,kBAAC,IAAMhC,SAAP,KACE,kBAACiC,EAAA,EAAD,MACA,kBAACpF,EAAD,MACA,kBAAC,EAAD,CAAMwB,MAAO2C,IACb,kBAACU,EAAD,OCjCSQ,MARf,WACE,OACE,yBAAKnF,UAAU,OACb,kBAACiF,EAAD,QCIcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.61a7de59.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    marginRight: \"auto\",\n  }\n}));\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            LibFasc\n          </Typography>\n          <Button color=\"inherit\">Play</Button>\n          <Button color=\"inherit\">Rules</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 100,\n  },\n  img: {\n    maxWidth: 100,\n    height: \"auto\",\n  },\n});\n\nexport default function LibFascCard(props) {\n  const classes = useStyles();\n  const imgPath = process.env.PUBLIC_URL + \"/images/cards/\" + props.cardType + \".png\";\n\n  return (\n    <Card className={classes.card}>\n      <CardMedia title={props.cardType + \"card\"}>\n        <img className={classes.img} src={imgPath} alt={props.cardType + \"card\"}/>\n      </CardMedia>\n    </Card>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport LibFascCard from './LibFascCard';\n\nexport default function CardGrid(props) {\n  const cards = props.cards.slice(0, props.index);\n\n  return (\n    <Grid container spacing={1}>\n      {cards.map(card => (\n        <Grid item key={card.key}>\n          <LibFascCard\n            cardType={card.cardType}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\n\nimport CardGrid from './CardGrid';\n\nconst useStyles = makeStyles(theme => ({\n  guess: {\n    backgroundColor: \"gainsboro\",\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  guessButton: {\n    margin: theme.spacing(1),\n  },\n  cardGrid: {\n    backgroundColor: \"darkgrey\",\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n}));\n\nfunction Guess(props) {\n  const classes = useStyles();\n  return (\n    <Container className={classes.guess} maxWidth=\"lg\">\n      <Button\n        variant=\"outlined\"\n        className={classes.guessButton}\n        color=\"primary\"\n        onClick={props.onClick(this)}\n        value=\"liberal\">\n        LIB\n      </Button>\n      <Button\n        variant=\"outlined\"\n        className={classes.guessButton}\n        color=\"secondary\"\n        onClick={props.onClick(this)}\n        value=\"fascist\">\n        FASC\n      </Button>\n    </Container>\n  );\n}\n\nfunction ResultGrid(props) {\n  const classes = useStyles();\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"lg\">\n      <CardGrid cards={props.cards} index={props.index} />\n    </Container>\n  );\n}\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n    }\n  }\n\n  guessCard = (choice) => {\n    const actual = this.props.cards[this.state.index].cardType;\n    debugger;\n    if (choice === actual) {\n      this.state.index++;\n    } else {\n      this.endGame()\n    }\n  }\n\n  endGame() {\n    return;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <Guess onClick={this.guessCard} />\n          <ResultGrid cards={this.props.cards} index={this.state.index} />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n","function card(type, number) {\n  this.cardType = type;\n  this.key = `${type}-card-${number}`;\n}\n\nexport function generateCards(type, n) {\n  var libCards = [];\n  for (var i = 0; i < n; i++) {\n    libCards.push(new card(type, i));\n  }\n\n  return libCards;\n}\n\nexport function shuffle(array) {\n  var m = array.length, t, i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element.\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\n\nimport NavBar from './NavBar';\nimport Game from './Game';\n\nimport { generateCards, shuffle } from './utils';\n\nconst useStyles = makeStyles(theme => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst LIB_CARD_COUNT = 6;\nconst FASC_CARD_COUNT = 11;\nconst libCards = generateCards('liberal', LIB_CARD_COUNT);\nconst fascCards = generateCards('fascist', FASC_CARD_COUNT);\nconst allCards = shuffle(libCards.concat(fascCards));\n\nfunction Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Copyright © '}\n        <Link color=\"inherit\" href=\"https://jamesbaskerville.github.io/libfasc/\">\n          LibFasc\n        </Link>{' '}\n        {new Date().getFullYear()}\n        {'.'}\n      </Typography>\n    </footer>\n  );\n}\n\nexport default function LibFasc() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <NavBar />\n      <Game cards={allCards}/>\n      <Footer />\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport './App.css';\n\nimport LibFasc from './LibFasc';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LibFasc />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}