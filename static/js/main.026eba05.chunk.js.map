{"version":3,"sources":["NavBar.js","LibFascCard.js","CardGrid.js","LibFasc.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","marginRight","NavBar","classes","className","AppBar","position","Toolbar","Typography","variant","Button","color","card","maxWidth","media","height","LibFascCard","props","Card","CardMedia","image","process","cardType","CardContent","gutterBottom","component","toUpperCase","display","flexDirection","cardMedia","paddingTop","cardContent","CardGrid","cards","Grid","container","spacing","map","item","key","xs","sm","md","Copyright","align","Link","href","Date","getFullYear","cardGrid","paddingBottom","footer","backgroundColor","palette","background","paper","padding","Album","Fragment","CssBaseline","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.026eba05.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    marginRight: \"auto\",\n  }\n}));\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            LibFasc\n          </Typography>\n          <Button color=\"inherit\">Play</Button>\n          <Button color=\"inherit\">Rules</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 466,\n  },\n});\n\nexport default function LibFascCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.media}\n        image={process.env.PUBLIC_URL + \"/images/cards/\" + props.cardType + \".png\"}\n        title={props.cardType + \"card\"}\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {props.cardType.toUpperCase()}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport LibFascCard from './LibFascCard';\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function CardGrid(props) {\n  const cards = props.cards;\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={4}>\n      {cards.map(card => (\n        <Grid item key={card} xs={12} sm={6} md={4}>\n\n          <LibFascCard\n            key={card.key}\n            className={classes.card}\n            cardType={card.cardType}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nimport NavBar from './NavBar';\nimport CardGrid from './CardGrid';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://jamesbaskerville.github.io/libfasc/\">\n        LibFasc\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nexport default function Album() {\n  const classes = useStyles();\n  const cards = [\n    {key: \"lib-card-1\", cardType: \"liberal\"},\n    {key: \"fasc-card-1\", cardType: \"fascist\"},\n    {key: \"lib-card-2\", cardType: \"liberal\"},\n    {key: \"fasc-card-2\", cardType: \"fascist\"},\n    {key: \"lib-card-3\", cardType: \"liberal\"},\n    {key: \"fasc-card-3\", cardType: \"fascist\"},\n\n  ];\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      {/* Header */}\n      <NavBar />\n      {/* End header */}\n      <main>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          <CardGrid cards={cards} />\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport './App.css';\n\nimport LibFasc from './LibFasc';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LibFasc />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}